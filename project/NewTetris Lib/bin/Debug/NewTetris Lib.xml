<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NewTetris Lib</name>
    </assembly>
    <members>
        <member name="T:NewTetris_Lib.Game">
            <summary>
            Oracle game class controling the entire game
            </summary>
        </member>
        <member name="F:NewTetris_Lib.Game.level">
            <summary>
            Current level the player is on - currently unused
            </summary>
        </member>
        <member name="F:NewTetris_Lib.Game.isPlaying">
            <summary>
            Flag to see if player is currently playing the level
            and therefore level code should be running - currently unused
            </summary>
        </member>
        <member name="F:NewTetris_Lib.Game.score">
            <summary>
            Current player score - currently unused
            </summary>
        </member>
        <member name="F:NewTetris_Lib.Game.random">
            <summary>
            Random object used to randomly select next shape
            to appear in level
            </summary>
        </member>
        <member name="F:NewTetris_Lib.Game.curShape">
            <summary>
            Current shape dropping onto the playing field
            </summary>
        </member>
        <member name="F:NewTetris_Lib.Game.field">
            <summary>
            Link to widget displaying the playing field. 
            Used to place pieces and shapes inside of it.
            </summary>
        </member>
        <member name="F:NewTetris_Lib.Game.imgPiece">
            <summary>
            Holds the image for a piece that is used to 
            compose a shape. This is used so the New Tetris Library
            can retrieve the image for a shape.
            </summary>
        </member>
        <member name="M:NewTetris_Lib.Game.#ctor">
            <summary>
            Default constructor initializing random field and setting
            curShape to null
            </summary>
        </member>
        <member name="M:NewTetris_Lib.Game.NextShape">
            <summary>
            Generates the next shape to be put into the playing field
            </summary>
        </member>
        <member name="T:NewTetris_Lib.Orientation">
            <summary>
            Used to store each of the four orientations of a shape
            </summary>
        </member>
        <member name="F:NewTetris_Lib.Orientation.positions">
            <summary>
            Dynamic array (aka List) of 2D positions indicating
            the position of each piece in the shape for this orientation
            </summary>
        </member>
        <member name="M:NewTetris_Lib.Orientation.#ctor">
            <summary>
            Default constructor initializing the positions to a 
            new empty List
            </summary>
        </member>
        <member name="M:NewTetris_Lib.Orientation.#ctor(System.Collections.Generic.List{NewTetris_Lib.Position})">
            <summary>
            Explicit constructor initializing the positions to
            the given positions
            </summary>
            <param name="positions">List of positions to initialize field to</param>
        </member>
        <member name="M:NewTetris_Lib.Orientation.AddPosition(NewTetris_Lib.Position)">
            <summary>
            Adds a position to the list of position for this orientation
            </summary>
            <param name="pos">Position to add</param>
        </member>
        <member name="T:NewTetris_Lib.Piece">
            <summary>
            The class holds a single cube that can be used to compose a Tetris shape
            </summary>
        </member>
        <member name="F:NewTetris_Lib.Piece.SIZE">
            <summary>
            Size of piece, i.e the width and height in pixels
            </summary>
        </member>
        <member name="F:NewTetris_Lib.Piece.pos">
            <summary>
            Current position of piece
            </summary>
        </member>
        <member name="F:NewTetris_Lib.Piece.pic">
            <summary>
            Control used to hold the image of the piece so GUI can display it
            </summary>
        </member>
        <member name="M:NewTetris_Lib.Piece.#ctor(NewTetris_Lib.Position)">
            <summary>
            typical explicit constructor
            </summary>
            <param name="pos">This gives the position of the piece</param>
        </member>
        <member name="M:NewTetris_Lib.Piece.SetPos(NewTetris_Lib.Position)">
            <summary>
            Sets the position of the piece
            </summary>
            <param name="pos">New position of the piece</param>
        </member>
        <member name="M:NewTetris_Lib.Piece.UpdateImgPos">
            <summary>
            Allows the Picture Box control to be updated to the
            position of the piece, meaning the visual representation
            of the piece will now match the coding position of the piece.
            </summary>
        </member>
        <member name="M:NewTetris_Lib.Piece.CanMoveDown">
            <summary>
            Check to see if the piece can move down.
            </summary>
            <returns>True if moving down will not cause a collision, False otherwise</returns>
        </member>
        <member name="M:NewTetris_Lib.Piece.CanMoveLeft">
            <summary>
            Check to see if the piece can move left.
            </summary>
            <returns>True if moving left will not cause a collision, False otherwise</returns>
        </member>
        <member name="M:NewTetris_Lib.Piece.CanMoveRight">
            <summary>
            Check to see if the piece can move right.
            </summary>
            <returns>True if moving right will not cause a collision, False otherwise</returns>
        </member>
        <member name="M:NewTetris_Lib.Piece.DissolveIntoField">
            <summary>
            Puts this piece into the playing field. This takes the current position of the piece
            and puts a 1 in the playing field at that location, signify it is now occupied
            </summary>
        </member>
        <member name="M:NewTetris_Lib.Piece.MoveDown">
            <summary>
            Moves the piece down, updating the visual representation as well
            </summary>
            <returns>True if moving down was successful (i.e. no collision occurred), False otherwise</returns>
        </member>
        <member name="M:NewTetris_Lib.Piece.MoveLeft">
            <summary>
            Moves the piece left, updating the visual representation as well
            </summary>
        </member>
        <member name="M:NewTetris_Lib.Piece.MoveRight">
            <summary>
            Moves the piece right, updating the visual representation as well
            </summary>
        </member>
        <member name="M:NewTetris_Lib.Piece.IsCollision">
            <summary>
            Checks if this piece's position is already occupied in the playing field
            </summary>
            <returns>
            True if a collision occurred (i.e. playing field already has a 1 in the piece's current position),
            False otherwise
            </returns>
        </member>
        <member name="M:NewTetris_Lib.Piece.IsCollision(NewTetris_Lib.Position)">
            <summary>
            Checks a given position to see if it is already occupied in the playing field.
            Used to specutively move a piece and see if a collision would occur, without actually
            modifying its current position
            </summary>
            <param name="pos">Position to check</param>
            <returns>True if a collision does occur at the given position, False otherwise</returns>
        </member>
        <member name="T:NewTetris_Lib.PlayingField">
            <summary>
            Encodes information about the playing
            field of the game. Uses a grid of rows
            and cols storing 1 for occupied and 0
            for vacant
            </summary>
        </member>
        <member name="F:NewTetris_Lib.PlayingField.instance">
            <summary>
            Singleton pattern instance
            </summary>
        </member>
        <member name="F:NewTetris_Lib.PlayingField.field">
            <summary>
            Grid holding 1 for occupied, 0 for vacant
            </summary>
        </member>
        <member name="E:NewTetris_Lib.PlayingField.OnRowClear">
            <summary>
            Observer pattern event for when a row is 
            cleared - currently unused
            </summary>
        </member>
        <member name="M:NewTetris_Lib.PlayingField.#ctor">
            <summary>
            Default constructor initializing the field
            to 22 rows and 15 columns
            </summary>
        </member>
        <member name="M:NewTetris_Lib.PlayingField.GetInstance">
            <summary>
            Retrieves the Singleton pattern instance
            </summary>
            <returns>The Singleton instance</returns>
        </member>
        <member name="M:NewTetris_Lib.PlayingField.IsEmpty(System.Int32,System.Int32)">
            <summary>
            Checks if a location in the field is empty (i.e. vacant)
            </summary>
            <param name="r">Row</param>
            <param name="c">Column</param>
            <returns>True if empty, False otherwise</returns>
        </member>
        <member name="M:NewTetris_Lib.PlayingField.CheckClearAllRows">
            <summary>
            Checks each row to see if any of them are filled and
            needs to be cleared, then clears those rows - currently
            unused and not implemented
            </summary>
        </member>
        <member name="T:NewTetris_Lib.Position">
            <summary>
            Stores a 2D position composed of an
            X and Y coordinate
            </summary>
        </member>
        <member name="F:NewTetris_Lib.Position.x">
            <summary>
            X coordinate
            </summary>
        </member>
        <member name="F:NewTetris_Lib.Position.y">
            <summary>
            Y coordinate
            </summary>
        </member>
        <member name="M:NewTetris_Lib.Position.#ctor(System.Int32,System.Int32)">
            <summary>
            Explicit constructor
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
        </member>
        <member name="T:NewTetris_Lib.Shape">
            <summary>
            Used to store a Tetris shape
            </summary>
        </member>
        <member name="F:NewTetris_Lib.Shape.pieces">
            <summary>
            Array of individual pieces (squares) that
            composes this shape. Is always 4 pieces.
            </summary>
        </member>
        <member name="F:NewTetris_Lib.Shape.orientations">
            <summary>
            Array of orientations for this shape
            </summary>
        </member>
        <member name="F:NewTetris_Lib.Shape.orientationIndex">
            <summary>
            Current orientation
            </summary>
        </member>
        <member name="M:NewTetris_Lib.Shape.#ctor(NewTetris_Lib.Orientation[])">
            <summary>
            Default constructor
            </summary>
            <param name="orientations">Array of orientations to use</param>
        </member>
        <member name="M:NewTetris_Lib.Shape.UpdatePiecePos">
            <summary>
            Updates the position of each piece based on the current orientation
            </summary>
        </member>
        <member name="M:NewTetris_Lib.Shape.RotateCW">
            <summary>
            Rotates the shape clockwise
            </summary>
        </member>
        <member name="M:NewTetris_Lib.Shape.RotateCCW">
            <summary>
            Rotates the shape counter clockwise
            </summary>
        </member>
        <member name="M:NewTetris_Lib.Shape.MoveOrientationsDown">
            <summary>
            Moves all orientations down to allow them to keep up with the shape
            </summary>
        </member>
        <member name="M:NewTetris_Lib.Shape.MoveOrientationsRight">
            <summary>
            Moves all orientations to the right to allow them to keep up with the shape
            </summary>
        </member>
        <member name="M:NewTetris_Lib.Shape.MoveOrientationsLeft">
            <summary>
            Moves all orientations to the left to allow them to keep up with the shape
            </summary>
        </member>
        <member name="M:NewTetris_Lib.Shape.TryMoveDown">
            <summary>
            Tries to move the shape down as long as all pieces can move down
            </summary>
            <returns>True if shape was able to move down, False otherwise</returns>
        </member>
        <member name="M:NewTetris_Lib.Shape.TryMoveLeft">
            <summary>
            Tries to move the shape left as long as all pieces can move left
            </summary>
        </member>
        <member name="M:NewTetris_Lib.Shape.TryMoveRight">
            <summary>
            Tries to move the shape right as long as all pieces can move right
            </summary>
        </member>
        <member name="M:NewTetris_Lib.Shape.DissolveIntoField">
            <summary>
            Dissolves each piece into playing field, setting each
            position to 1 in the field
            </summary>
        </member>
        <member name="T:NewTetris_Lib.ShapeFactory">
            <summary>
            Uses the Factory design pattern to generate shape objects
            </summary>
        </member>
        <member name="M:NewTetris_Lib.ShapeFactory.MakeShape(NewTetris_Lib.ShapeType)">
            <summary>
            Factory method that makes shape objects based on the shape type given
            </summary>
            <param name="type">Shape type to create the shape from</param>
            <returns>Shape object</returns>
        </member>
        <member name="M:NewTetris_Lib.ShapeFactory.MakeOrientation(System.Int32[0:,0:])">
            <summary>
            Takes a grid of 1s and 0s to create an orientation for a shape
            </summary>
            <param name="grid">Grid of 1s and 0s</param>
            <returns>Orientation object</returns>
        </member>
        <member name="T:NewTetris_Lib.ShapeType">
            <summary>
            This holds the different types of shapes.
            Used in Shape class to hold the type of shape.
            </summary>
        </member>
        <member name="F:NewTetris_Lib.ShapeType.LINE">
            <summary>
            Makes the following shape<br />
               X<br />
               X<br />
               X<br />
               X
            </summary>
        </member>
        <member name="F:NewTetris_Lib.ShapeType.SQUARE">
            <summary>
            Makes the following shape<br />
               XX<br />
               XX
            </summary>
        </member>
        <member name="F:NewTetris_Lib.ShapeType.LBLOCK">
            <summary>
            Makes the following shape<br />
               X<br />
               X<br />
               XX
            </summary>
        </member>
        <member name="F:NewTetris_Lib.ShapeType.RBLOCK">
            <summary>
            Makes the following shape<br />
               X<br />
               X<br />
              XX<br />
            </summary>
        </member>
        <member name="F:NewTetris_Lib.ShapeType.ZBLOCK">
            <summary>
            Makes the following shape<br />
               XX<br />
                XX<br />
            </summary>
        </member>
        <member name="F:NewTetris_Lib.ShapeType.TBLOCK">
            <summary>
            Makes the following shape<br />
                X<br />
               XXX
            </summary>
        </member>
        <member name="F:NewTetris_Lib.ShapeType.REV_ZBLOCK">
            <summary>
            Makes the following shape<br />
               XX<br />
              XX<br />
            </summary>
        </member>
    </members>
</doc>
